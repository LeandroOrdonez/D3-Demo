<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Bubble view</title>
        <style>

            .leaf circle {
                fill: #ff7f0e;
                fill-opacity: 1;
            }

            text {
                font-size: 11px;
                pointer-events: none;
            }

            text.parent {
                fill: #1f77b4;
            }

            circle {
                fill: #ccc;
                stroke: #999;
                pointer-events: all;
            }

            circle.parent {
                fill: #1f77b4;
                fill-opacity: .1;
                stroke: steelblue;
            }

            circle.parent:hover {
                stroke: #ff7f0e;
                stroke-width: .5px;
            }

            circle.child {
                pointer-events: none;
            }

        </style>
    </h:head>
    <h:body>
        <h:form>
            <h:commandLink action="index" value="Back" />
        </h:form>
        <script src="http://d3js.org/d3.v3.min.js"></script>
        <script>

            var diameter = 960,
                    format = d3.format(",d"),
                    color = d3.scale.category20c();

            var bubble = d3.layout.pack()
                    .sort(null)
                    .size([diameter, diameter])
                    .padding(1.5);

            var svg = d3.select("body").append("svg")
                    .attr("width", diameter)
                    .attr("height", diameter)
                    .attr("class", "bubble");

            d3.json("datasources/per-document-topics.json", function(error, root) {
                var node = svg.selectAll(".node")
                        .data(bubble.nodes(classes(root))
                        .filter(function(d) {
                    return !d.children;
                }))
                        .enter().append("g")
                        .attr("class", "node")
                        .attr("transform", function(d) {
                    return "translate(" + d.x + "," + d.y + ")";
                });

                node.append("title")
                        .text(function(d) {
                    return d.className + ": " + format(d.value);
                });

                node.append("circle")
                        .attr("r", function(d) {
                    return d.r;
                })
                        .style("fill", function(d) {
                    return color(d.packageName);
                });

                node.append("text")
                        .attr("dy", ".3em")
                        .style("text-anchor", "middle")
                        .text(function(d) {
                    return d.className.substring(0, d.r / 3);
                });
            });

// Returns a flattened hierarchy containing all leaf nodes under the root.
            function classes(root) {
                var classes = [];

                function recurse(name, node) {
                    if (node.children)
                        node.children.forEach(function(child) {
                            recurse(node.name, child);
                        });
                    else
                        classes.push({packageName: name, className: node.name, value: node.size});
                }

                recurse(null, root);
                return {children: classes};
            }

            d3.select(self.frameElement).style("height", diameter + "px");


        </script>
    </h:body>
</html>

