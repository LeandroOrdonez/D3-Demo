<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:h="http://xmlns.jcp.org/jsf/html">
    <h:head>
        <title>Zoomable circle packing view</title>
        <script src="http://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js"></script>
        <style>

            .node {
                cursor: pointer;
            }

            .node:hover {
                stroke: #000;
                stroke-width: 1.5px;
            }

            .node--root {
                stroke: #777;
                stroke-width: 2px;
            }

            .node--leaf {
                fill: white;
            }

            .node--leaf:hover {
                stroke: #000;
                stroke-width: 1.5px;
            }

            .label {
                font: 11px "Helvetica Neue", Helvetica, Arial, sans-serif;
                text-anchor: middle;
                text-shadow: 0 1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff, 0 -1px 0 #fff;
            }

            .label,
            .node--root/*,
            .node--leaf*/ {
                pointer-events: none;
            }

        </style>
        <script>
            jQuery.fn.d3Click = function() {
                this.each(function(i, e) {
                    var evt = document.createEvent("MouseEvents");
                    evt.initMouseEvent("click", true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);

                    e.dispatchEvent(evt);
                });
            };
        </script>
    </h:head>
    <h:body>
        <h:form>
            <h:commandLink action="index" value="Back" />
        </h:form>
        <script src="http://d3js.org/d3.v3.min.js"></script>
        <script>
            //<![CDATA[
            var margin = 10,
                    outerDiameter = 960,
                    innerDiameter = outerDiameter - margin - margin;

            var x = d3.scale.linear()
                    .range([0, innerDiameter]);

            var y = d3.scale.linear()
                    .range([0, innerDiameter]);

            var color = d3.scale.linear()
                    .domain([-1, 5])
                    .range(["hsl(152,80%,80%)", "hsl(228,30%,40%)"])
                    .interpolate(d3.interpolateHcl);

            var pack = d3.layout.pack()
                    .padding(2)
                    .size([innerDiameter, innerDiameter])
                    .value(function(d) {
                return d.size;
            });

            var svg = d3.select("body").append("svg")
                    .attr("width", outerDiameter)
                    .attr("height", outerDiameter)
                    .append("g")
                    .attr("transform", "translate(" + margin + "," + margin + ")");

            d3.json("datasources/per-document-topics.json", function(error, root) {
                var focus = root,
                        nodes = pack.nodes(root);

                svg.append("g").selectAll("circle")
                        .data(nodes)
                        .enter().append("circle")
                        .attr("class", function(d) {
                    return d.parent ? d.children ? "node" : "node node--leaf" : "node node--root";
                })
                        .attr("id", function(d) {
                    if (d.depth !== 3) {
                        return d.name;
                    }
                    ;
                })
                        .attr("transform", function(d) {
                    return "translate(" + d.x + "," + d.y + ")";
                })
                        .attr("r", function(d) {
                    return d.r;
                })
                        .style("fill", function(d) {
                    return d.children ? color(d.depth) : null;
                })
                        .on("click", function(d) {
                    if (d.depth === 3) {
                        var sel = "#" + d.name;
                        //console.log(sel);
                        
                        zoom(root);
                        return $(sel).d3Click();
                        //return zoom(d3.select('"' + sel + '"'));
                        //return zoom(d3.select(sel));
                    } else {
                        return zoom(focus === d ? root : d);
                    }
                });
                svg.append("g").selectAll("text")
                        .data(nodes)
                        .enter().append("text")
                        .attr("class", "label")
                        .attr("transform", function(d) {
                    return "translate(" + d.x + "," + d.y + ")";
                })
                        .style("opacity", function(d) {
                    return d.parent === root ? 1 : 0;
                })
                        .text(function(d) {
                    return d.name;
                });

                d3.select(window)
                        .on("click", function() {
                    zoom(root);
                });

                function zoom(d, i) {
                    focus = d;

                    var k = innerDiameter / d.r / 2;
                    x.domain([d.x - d.r, d.x + d.r]);
                    y.domain([d.y - d.r, d.y + d.r]);
                    d3.event.stopPropagation();

                    var transition = d3.selectAll("text,circle").transition()
                            .duration(d3.event.altKey ? 7500 : 750)
                            .attr("transform", function(d) {
                        return "translate(" + x(d.x) + "," + y(d.y) + ")";
                    });

                    transition.filter("circle")
                            .attr("r", function(d) {
                        return k * d.r;
                    });

                    transition.filter("text")
                            .style("opacity", function(d) {
                        return d.parent === focus ? 1 : 0;
                    });
                }
            });

            d3.select(self.frameElement).style("height", outerDiameter + "px");

            //]]>
        </script>
    </h:body>
</html>

